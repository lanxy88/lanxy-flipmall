<?xml version="1.0" encoding="utf-8"?>
<controls:BasePopupCanvas xmlns:mx="http://www.adobe.com/2006/mxml" 
						  xmlns:controls="controls.*"
						  backgroundColor="0x333333" 
						  horizontalScrollPolicy="off" verticalScrollPolicy="off" 
						  borderColor="0xFFFFFF"
						  borderStyle="solid" borderThickness="2" cornerRadius="3"
						  clipContent="false"
						  width="300" height="100"
						  creationComplete="onInit(event)" xmlns:local="*">
	<mx:Script>
		<![CDATA[
			import common.BookPage;
			
			import mx.events.FlexEvent;
			
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
			
			import utils.Helper;
			
			
			public var returnCallback:Function;
			
			private var pdfPage:PDF;
			
			[Bindable]
			public var pages:Array = [];
			
			private var timer:Timer ;
			
			public override function showDialog(x:Number = NaN, y:Number = NaN, modal:Boolean = true):void
			{
				super.showDialog(x,y,modal);
			}
			
			private function closeBook():void
			{
				RunTime.close();
			}
			private function onSaveButton(e:*){
				if(pdfPage == null) return;
				var bytes:ByteArray = pdfPage.save( Method.LOCAL );
				var f:FileReference = new FileReference();
				f.save(bytes, "output.pdf");

				this.close();
			}
			
			private function startCreatPdf(e:*):void
			{
				var list:Array = [];
				for each(var item:BookPage in RunTime.bookPages)
				{
					var find:BookPage = null;
					for each(var i:int in pages)
					{
						if(i == item.pageId)
						{
							find = item;
							break;
						}
					}
					if(find != null) list.push(find);
				}
				if(list.length == 0){
					tiptext.text = l.i.s('NoPage','Please input pages region');
					return;
				}
				Helper.savePages(list,pdfCreatedCallback);
			}
			protected function onInit(event:FlexEvent):void
			{

				if(pages == null) return ;
				btnSave.addEventListener(MouseEvent.MOUSE_DOWN,onSaveButton);
				
				timer = new Timer(100,1);
				timer.addEventListener(TimerEvent.TIMER, startCreatPdf);
				timer.start();
				trace("complete");
			}
			
			private function pdfCreatedCallback(pdf:PDF):void
			{
				this.pdfPage = pdf;
				//btnSave.visible = true;
				nodata.visible = false;
				nodata.height = 0;
				confirm.visible = true;
				
				tiptext.text = l.i.s('PdfCreated','PDF is generated.');
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" paddingTop="20" paddingLeft="20" paddingBottom="20" paddingRight="20" horizontalAlign="center" verticalGap="3">
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Label width="100%" id="tiptext" text="{l.i.s('GeneratedPdf','Generating PDF, please wait...')}" textAlign="center" />
		</mx:HBox>
		
		
		<mx:Spacer height="10" />
		<mx:HBox id="nodata" width="100%" horizontalAlign="center">
			<mx:Button buttonMode="true" useHandCursor="true" label="{l.i.s('Cancel','Cancel')}" click="this.close()" />
		</mx:HBox>
		
		<mx:HBox id="confirm" visible="false" width="100%" horizontalAlign="center">
			<mx:Button id="btnSave" buttonMode="true" useHandCursor="true" label="{l.i.s('Save','Save')}" click="closeBook()" />
			<mx:Button buttonMode="true" useHandCursor="true" label="{l.i.s('Close','Close')}" click="this.close()" />
		</mx:HBox>
	</mx:VBox>
	
	
</controls:BasePopupCanvas>
